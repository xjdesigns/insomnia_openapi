{"version":3,"sources":["components/header.tsx","components/converter.tsx","components/docs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","handleSelected","className","onClick","defaultConfig","Converter","useState","inoInput","setInoInput","inoOutput","setInoOutput","openapiConfig","setOpenapiConfig","notifState","setNotifState","redocDisplay","setRedocDisplay","updateConfig","ev","key","value","target","prevState","fileHandler","a","file","files","item","text","console","error","onChange","val","warn","placeholder","htmlFor","type","id","accept","output","Parser","JSON","parse","options","convert","stringify","err","body","document","createElement","Blob","href","URL","createObjectURL","download","appendChild","click","removeChild","disabled","readOnly","spec","Docs","language","App","selected","setSelected","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.26799267.chunk.js","sourcesContent":["import React from 'react'\n\ntype IHeader = {\n\thandleSelected: (selected: string) => void\n}\n\nconst Header = ({ handleSelected }: IHeader): JSX.Element => {\n\treturn (\n\t\t<header className=\"ino-header\">\n\t\t\t<div className=\"ino-header__title\">\n\t\t\t\tInsomniaV4 {`->`} OpenAPI V3\n\t\t\t</div>\n\t\t\t<div className=\"ino-header__ext\">\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"spx-pill spx-pill--tr\" onClick={() => handleSelected('Docs')}>\n\t\t\t\t\t\tdocs\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"spx-pill spx-pill--sd\" onClick={() => handleSelected('Converter')}>\n\t\t\t\t\t\tPlayground\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</header>\n\t)\n}\n\nexport default Header\n","import React, { useState } from 'react'\nimport { Parser } from 'insomnia_openapi'\nimport { RedocStandalone } from 'redoc'\n\nlet defaultConfig = {\n\t\"title\": \"\",\n\t\"description\": \"\",\n\t\"version\": \"1.0.0\"\n}\n\nconst Converter = () => {\n\tconst [inoInput, setInoInput] = useState('')\n\tconst [inoOutput, setInoOutput] = useState('')\n\tconst [openapiConfig, setOpenapiConfig] = useState(defaultConfig)\n\tconst [notifState, setNotifState] = useState('waiting')\n\tconst [redocDisplay, setRedocDisplay] = useState(false)\n\n\tconst handleInput = (ev: React.ChangeEvent<HTMLTextAreaElement>) => {\n\t\tconst val = ev.target.value\n\t\tsetInoInput(val)\n\t\tconsole.warn('lets go woot')\n\t}\n\n\tconst handleConvert = () => {\n\t\t// Can remove after next publish, version issue is 0.0.4\n\t\tconst options = {}\n\t\ttry {\n\t\t\tconst parser = new Parser(JSON.parse(inoInput), { openapiConfig, options })\n\t\t\tconst output: any = parser.convert()\n\t\t\tsetInoOutput(JSON.stringify(output, null, '  '))\n\t\t\tsetNotifState('success')\n\t\t\tconsole.warn('output::', output)\n\t\t} catch (err) {\n\t\t\tsetNotifState('error')\n\t\t\tsetInoOutput('')\n\t\t\tconsole.error(err)\n\t\t}\n\t}\n\n\tconst updateConfig = (ev: React.ChangeEvent<HTMLInputElement>, key: string) => {\n\t\tconst value = ev.target.value\n\t\tsetOpenapiConfig(prevState => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[key]: value\n\t\t\t}\n\t\t});\n\t}\n\n\tconst openRedoc = () => {\n\t\tif (inoOutput) {\n\t\t\tsetRedocDisplay(true)\n\t\t}\n\t}\n\n\tconst handleReset = () => {\n\t\tsetOpenapiConfig(defaultConfig)\n\t\tsetInoInput('')\n\t\tsetInoOutput('')\n\t\tsetNotifState('waiting')\n\t}\n\n\tconst notifColor = () => {\n\t\tif (notifState === 'error') {\n\t\t\treturn 'ino-notifbar--err'\n\t\t}\n\n\t\tif (notifState === 'success') {\n\t\t\treturn 'ino-notifbar--sc'\n\t\t}\n\t}\n\n\tconst fileHandler = async (ev: any) => {\n\t\tconst file = ev.target.files.item(0)\n\t\t\n\t\ttry {\n\t\t\tconst text = await file.text();\n\t\t\tsetInoInput(text)\n\t\t} catch (err) {\n\t\t\tsetNotifState('error')\n\t\t\tconsole.error(err)\n\t\t}\n\t}\n\n\tconst saveJson = () => {\n\t\tif (inoOutput) {\n\t\t\tconst body = document.body\n\t\t\tconst a = document.createElement('a')\n\t\t\tconst file = new Blob([inoOutput], { type: 'application/json' })\n\t\t\ta.href = URL.createObjectURL(file)\n\t\t\ta.download = 'openapi.json'\n\t\t\tbody.appendChild(a)\n\t\t\ta.click()\n\t\t\tbody.removeChild(a)\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div className={`ino-notifbar ${notifColor()}`}>{notifState}</div>\n\t\t\t<div className=\"ino-convert-container spx-form\">\n\t\t\t\t<div className=\"ino-c-input\">\n\t\t\t\t\t<textarea className=\"spx-textarea\" onChange={handleInput} placeholder=\"Input from insomnia v4 JSON export\" value={inoInput} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"ino-c-actions\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label className=\"spx-label\" htmlFor=\"title\">Title</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"title\" className=\"spx-input\" onChange={ev => updateConfig(ev, 'title')} placeholder=\"API Title\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label className=\"spx-label\" htmlFor=\"description\">Description</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"description\" className=\"spx-input\" onChange={ev => updateConfig(ev, 'description')} placeholder=\"API Description\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label className=\"spx-label\" htmlFor=\"version\">Version</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"version\" className=\"spx-input\" onChange={ev => updateConfig(ev, 'version')} placeholder=\"API Version\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label className=\"spx-label\" htmlFor=\"fileApi\">Use File</label>\n\t\t\t\t\t\t<input type=\"file\" accept=\".json\" id=\"fileApi\" className=\"spx-input\" onChange={fileHandler} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"spx-mg-bt-12\">\n\t\t\t\t\t\t<button className=\"spx-btn spx-btn--pr spx-btn--block\" onClick={handleConvert}>Convert</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"spx-mg-bt-12\">\n\t\t\t\t\t\t<button className=\"spx-btn spx-btn--sd spx-btn--block\" onClick={handleReset}>Reset</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"spx-mg-bt-12\">\n\t\t\t\t\t\t<button className=\"spx-btn spx-btn--pr--inverted spx-btn--block\" onClick={saveJson} disabled={!inoOutput}>Download</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"spx-mg-bt-12\">\n\t\t\t\t\t\t<button className=\"spx-btn spx-btn--pr--inverted spx-btn--block\" onClick={openRedoc} disabled={!inoOutput}>Redoc</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"spx-mg-bt-12\">\n\t\t\t\t\t\t<p className=\"ino-txt-sm\">\n\t\t\t\t\t\t\tIf you have imported an openapi spec already or built out using the design document, you can still use\n\t\t\t\t\t\t\tthe tool but in the insomnia payload there is already a yaml export.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"ino-c-output\">\n\t\t\t\t\t<textarea className=\"spx-textarea\" value={inoOutput} readOnly placeholder=\"Export to OpenApi V3\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{redocDisplay && (\n\t\t\t\t<div className=\"ino-redoc\">\n\t\t\t\t\t<div className=\"ino-redoc-close\">\n\t\t\t\t\t\t<button className=\"spx-btn spx-btn--sm spx-btn--circle\" onClick={() => setRedocDisplay(false)}>X</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"ino-redoc-cont\">\n\t\t\t\t\t\t<RedocStandalone spec={JSON.parse(inoOutput)} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"ino-redoc-overlay\" />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default Converter","import React from 'react'\n//@ts-ignore\nimport Highlight from 'react-highlight'\nimport 'highlight.js/styles/atom-one-dark.css'\n\nconst Docs = () => {\n\treturn (\n\t\t<div className=\"ino-docs-container\">\n\t\t\t<div className=\"spx-mg-bt-24\">\n\t\t\t\t<h3 className=\"spx-mg-bt-12\">Install</h3>\n\n\t\t\t\t<Highlight language=\"bash\">\n\t\t\t\t{`\n  npm install insomnia_openapi\n  or\n  npm i insomnia_openapi\n  or\n  yarn add insomnia_openapi\n\t\t\t\t`}\n\t\t\t\t</Highlight>\n\t\t\t</div>\n\n\t\t\t<div className=\"spx-mg-bt-24\">\n\t\t\t\t<h3 className=\"spx-mg-bt-12\">Usage</h3>\n\n\t\t\t\t<Highlight className=\"javascript\">\n\t\t\t\t{`\n  let openapiConfig = {\n    \"title\": \"My api\",\n    \"description\": \"Internal API\",\n    \"version\": \"1.0.0\"\n  };\n\n  // This would be the export from insomnia as V4\n  const INSOV4 = {\n    ...\n  }\n\n  const parser = new Parser(INSOV4, { openapiConfig })\n  const output = parser.convert()\n  console.warn('output::', output)\n\t\t\t\t`}\n\t\t\t\t</Highlight>\n\t\t\t</div>\n\n\n\n\t\t\t<div className=\"spx-mg-bt-24\">\n\t\t\t\t<h3 className=\"spx-mg-bt-12\">Options</h3>\n\t\t\t\t<p className=\"spx-mg-bt-12\">Note: since responses are not setup inside the normal document the parser tool will return back generic responses for 200, 400, 401. You can use the responseCallback function to create your own. It takes in the url and method for each path.</p>\n\n\t\t\t\t<Highlight className=\"javascript\">\n\t\t\t\t{`\n  const responseExample = (url, method) => {\n    if (url === '/path/to/api') {\n      if (method === 'get') {\n        return {\n          '200': {\n            description: '200 response',\n            content: {\n              'application/json': {\n                schema: 'object',\n                properties: {\n                  id: {\n                    type: 'integer',\n                    example: 2\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  const options = {\n    serverReturn: true,\n    serverCallback: servers => {[]},\n    responseCallback: responseExample\n  }\n\n  const parser = new Parser(INSOV4, { ..., options })\n\t\t\t\t`}\n\t\t\t\t</Highlight>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Docs","import { useState } from 'react'\nimport Header from './components/header'\nimport Converter from './components/converter'\nimport Docs from './components/docs'\n\nfunction App() {\n\tconst [selected, setSelected] = useState('')\n\n\tconst handleSelected = (selected: string): void => {\n\t\tsetSelected(selected)\n\t}\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Header handleSelected={handleSelected} />\n\n\t\t\t{selected === '' && (\n\t\t\t\t<div className=\"ino-selection\">\n\t\t\t\t\t<button className=\"ino-selection-btn\" onClick={() => handleSelected('Docs')}>Docs</button>\n\n\t\t\t\t\t<button className=\"ino-selection-btn\" onClick={() => handleSelected('Converter')}>Converter</button>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{selected === 'Docs' && <Docs />}\n\t\t\t{selected === 'Converter' && <Converter />}\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'segment_css/SEGMENT/2.0.0/segment.2.0.0.min.css'\nimport './styles.css'\n\n// @ts-ignore\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}